#include <arpa/inet.h>
#include <chrono>
#include <cstdio>
#include <fast_cgi/fast_cgi.hpp>
#include <iostream>
#include <sys/socket.h>

class responder : public fast_cgi::responder
{
public:
    virtual status_code_type run() override
    {
        using namespace fast_cgi::manipulator;

        output() << "Content-type: text/html" << feed << feed;
        output() << "<html>"
                 << "<h1>"
                 << "Hello, World!"
                 << "</h1>"
                 << "Your URI: " << params()["REQUEST_URI"] << "</html>";

        /*for (auto& i : params()) {
            std::cout << i.first << "=" << i.second << std::endl;
        }*/

        return 0;
    }
};

std::uint8_t source[] = {
    1,   1,   0,   1,   0,   8,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   1,   4,   0,   1,   5,   59,  5,
    0,   12,  0,   81,  85,  69,  82,  89,  95,  83,  84,  82,  73,  78,  71,  14,  3,   82,  69,  81,  85,  69,  83,
    84,  95,  77,  69,  84,  72,  79,  68,  71,  69,  84,  12,  0,   67,  79,  78,  84,  69,  78,  84,  95,  84,  89,
    80,  69,  14,  0,   67,  79,  78,  84,  69,  78,  84,  95,  76,  69,  78,  71,  84,  72,  11,  10,  83,  67,  82,
    73,  80,  84,  95,  78,  65,  77,  69,  47,  105, 110, 100, 101, 120, 46,  112, 104, 112, 11,  13,  82,  69,  81,
    85,  69,  83,  84,  95,  85,  82,  73,  47,  97,  115, 100, 115, 47,  115, 97,  100, 46,  112, 104, 112, 12,  23,
    68,  79,  67,  85,  77,  69,  78,  84,  95,  85,  82,  73,  47,  105, 110, 100, 101, 120, 46,  112, 104, 112, 47,
    97,  115, 100, 115, 47,  115, 97,  100, 46,  112, 104, 112, 13,  20,  68,  79,  67,  85,  77,  69,  78,  84,  95,
    82,  79,  79,  84,  47,  115, 114, 118, 47,  99,  108, 111, 117, 100, 47,  110, 101, 120, 116, 99,  108, 111, 117,
    100, 15,  8,   83,  69,  82,  86,  69,  82,  95,  80,  82,  79,  84,  79,  67,  79,  76,  72,  84,  84,  80,  47,
    50,  46,  48,  14,  5,   82,  69,  81,  85,  69,  83,  84,  95,  83,  67,  72,  69,  77,  69,  104, 116, 116, 112,
    115, 5,   2,   72,  84,  84,  80,  83,  111, 110, 17,  7,   71,  65,  84,  69,  87,  65,  89,  95,  73,  78,  84,
    69,  82,  70,  65,  67,  69,  67,  71,  73,  47,  49,  46,  49,  15,  12,  83,  69,  82,  86,  69,  82,  95,  83,
    79,  70,  84,  87,  65,  82,  69,  110, 103, 105, 110, 120, 47,  49,  46,  49,  52,  46,  48,  11,  12,  82,  69,
    77,  79,  84,  69,  95,  65,  68,  68,  82,  57,  49,  46,  51,  52,  46,  49,  49,  55,  46,  57,  51,  11,  5,
    82,  69,  77,  79,  84,  69,  95,  80,  79,  82,  84,  53,  49,  53,  52,  51,  11,  14,  83,  69,  82,  86,  69,
    82,  95,  65,  68,  68,  82,  49,  57,  50,  46,  49,  54,  56,  46,  49,  55,  56,  46,  54,  49,  11,  3,   83,
    69,  82,  86,  69,  82,  95,  80,  79,  82,  84,  52,  52,  51,  11,  13,  83,  69,  82,  86,  69,  82,  95,  78,
    65,  77,  69,  99,  108, 111, 117, 100, 46,  97,  121, 97,  114, 46,  101, 117, 15,  3,   82,  69,  68,  73,  82,
    69,  67,  84,  95,  83,  84,  65,  84,  85,  83,  50,  48,  48,  15,  30,  83,  67,  82,  73,  80,  84,  95,  70,
    73,  76,  69,  78,  65,  77,  69,  47,  115, 114, 118, 47,  99,  108, 111, 117, 100, 47,  110, 101, 120, 116, 99,
    108, 111, 117, 100, 47,  105, 110, 100, 101, 120, 46,  112, 104, 112, 11,  10,  83,  67,  82,  73,  80,  84,  95,
    78,  65,  77,  69,  47,  105, 110, 100, 101, 120, 46,  112, 104, 112, 9,   13,  80,  65,  84,  72,  95,  73,  78,
    70,  79,  47,  97,  115, 100, 115, 47,  115, 97,  100, 46,  112, 104, 112, 5,   2,   72,  84,  84,  80,  83,  111,
    110, 19,  4,   109, 111, 100, 72,  101, 97,  100, 101, 114, 115, 65,  118, 97,  105, 108, 97,  98,  108, 101, 116,
    114, 117, 101, 23,  4,   102, 114, 111, 110, 116, 95,  99,  111, 110, 116, 114, 111, 108, 108, 101, 114, 95,  97,
    99,  116, 105, 118, 101, 116, 114, 117, 101, 9,   13,  72,  84,  84,  80,  95,  72,  79,  83,  84,  99,  108, 111,
    117, 100, 46,  97,  121, 97,  114, 46,  101, 117, 14,  16,  72,  84,  84,  80,  95,  83,  69,  67,  95,  67,  72,
    95,  85,  65,  66,  114, 97,  118, 101, 32,  66,  114, 111, 119, 115, 101, 114, 32,  55,  56,  30,  1,   72,  84,
    84,  80,  95,  85,  80,  71,  82,  65,  68,  69,  95,  73,  78,  83,  69,  67,  85,  82,  69,  95,  82,  69,  81,
    85,  69,  83,  84,  83,  49,  15,  115, 72,  84,  84,  80,  95,  85,  83,  69,  82,  95,  65,  71,  69,  78,  84,
    77,  111, 122, 105, 108, 108, 97,  47,  53,  46,  48,  32,  40,  87,  105, 110, 100, 111, 119, 115, 32,  78,  84,
    32,  49,  48,  46,  48,  59,  32,  87,  105, 110, 54,  52,  59,  32,  120, 54,  52,  41,  32,  65,  112, 112, 108,
    101, 87,  101, 98,  75,  105, 116, 47,  53,  51,  55,  46,  51,  54,  32,  40,  75,  72,  84,  77,  76,  44,  32,
    108, 105, 107, 101, 32,  71,  101, 99,  107, 111, 41,  32,  67,  104, 114, 111, 109, 101, 47,  55,  56,  46,  48,
    46,  51,  57,  48,  52,  46,  49,  48,  56,  32,  83,  97,  102, 97,  114, 105, 47,  53,  51,  55,  46,  51,  54,
    19,  8,   72,  84,  84,  80,  95,  83,  69,  67,  95,  70,  69,  84,  67,  72,  95,  68,  69,  83,  84,  100, 111,
    99,  117, 109, 101, 110, 116, 19,  2,   72,  84,  84,  80,  95,  83,  69,  67,  95,  70,  69,  84,  67,  72,  95,
    85,  83,  69,  82,  63,  49,  11,  118, 72,  84,  84,  80,  95,  65,  67,  67,  69,  80,  84,  116, 101, 120, 116,
    47,  104, 116, 109, 108, 44,  97,  112, 112, 108, 105, 99,  97,  116, 105, 111, 110, 47,  120, 104, 116, 109, 108,
    43,  120, 109, 108, 44,  97,  112, 112, 108, 105, 99,  97,  116, 105, 111, 110, 47,  120, 109, 108, 59,  113, 61,
    48,  46,  57,  44,  105, 109, 97,  103, 101, 47,  119, 101, 98,  112, 44,  105, 109, 97,  103, 101, 47,  97,  112,
    110, 103, 44,  42,  47,  42,  59,  113, 61,  48,  46,  56,  44,  97,  112, 112, 108, 105, 99,  97,  116, 105, 111,
    110, 47,  115, 105, 103, 110, 101, 100, 45,  101, 120, 99,  104, 97,  110, 103, 101, 59,  118, 61,  98,  51,  22,
    1,   72,  84,  84,  80,  95,  83,  69,  67,  95,  79,  82,  73,  71,  73,  78,  95,  80,  79,  76,  73,  67,  89,
    48,  19,  4,   72,  84,  84,  80,  95,  83,  69,  67,  95,  70,  69,  84,  67,  72,  95,  83,  73,  84,  69,  110,
    111, 110, 101, 19,  8,   72,  84,  84,  80,  95,  83,  69,  67,  95,  70,  69,  84,  67,  72,  95,  77,  79,  68,
    69,  110, 97,  118, 105, 103, 97,  116, 101, 20,  17,  72,  84,  84,  80,  95,  65,  67,  67,  69,  80,  84,  95,
    69,  78,  67,  79,  68,  73,  78,  71,  103, 122, 105, 112, 44,  32,  100, 101, 102, 108, 97,  116, 101, 44,  32,
    98,  114, 20,  23,  72,  84,  84,  80,  95,  65,  67,  67,  69,  80,  84,  95,  76,  65,  78,  71,  85,  65,  71,
    69,  101, 110, 45,  85,  83,  44,  101, 110, 59,  113, 61,  48,  46,  57,  44,  100, 101, 59,  113, 61,  48,  46,
    56,  11,  128, 0,   0,   173, 72,  84,  84,  80,  95,  67,  79,  79,  75,  73,  69,  95,  95,  72,  111, 115, 116,
    45,  110, 99,  95,  115, 97,  109, 101, 83,  105, 116, 101, 67,  111, 111, 107, 105, 101, 108, 97,  120, 61,  116,
    114, 117, 101, 59,  32,  95,  95,  72,  111, 115, 116, 45,  110, 99,  95,  115, 97,  109, 101, 83,  105, 116, 101,
    67,  111, 111, 107, 105, 101, 115, 116, 114, 105, 99,  116, 61,  116, 114, 117, 101, 59,  32,  110, 99,  95,  117,
    115, 101, 114, 110, 97,  109, 101, 61,  99,  114, 111, 110, 97,  59,  32,  110, 99,  95,  116, 111, 107, 101, 110,
    61,  66,  77,  99,  66,  81,  100, 99,  122, 108, 51,  75,  74,  99,  101, 73,  57,  48,  55,  115, 104, 114, 104,
    85,  100, 118, 106, 119, 116, 51,  54,  110, 75,  59,  32,  110, 99,  95,  115, 101, 115, 115, 105, 111, 110, 95,
    105, 100, 61,  112, 54,  97,  98,  50,  50,  103, 115, 109, 101, 50,  115, 55,  54,  112, 49,  99,  115, 104, 102,
    100, 97,  102, 111, 118, 116, 0,   0,   0,   0,   0,   1,   4,   0,   1,   0,   0,   0,   0,   1,   5,   0,   1,
    0,   0,   0,   0
};

class conn : public fast_cgi::connection
{
public:
    int s;

    conn(int s) : s(s)
    {}
    ~conn()
    {
        close(s);
        LOG(debug("killing connection"));
    }
    virtual void flush() override
    {
        LOG(debug("flushing"));
    }
    virtual size_type read(void* buffer, size_type at_least, size_type at_most) override
    {
        return recv(s, (char*) buffer, at_most, 0);
    }
    virtual size_type write(const void* buffer, size_type size) override
    {
        send(s, (const char*) buffer, size, 0);

        return size;
    }
};

class con : public fast_cgi::connector
{
public:
    int s;

    con()
    {
        s = socket(AF_INET, SOCK_STREAM, 0);

        struct sockaddr_in server;
        server.sin_family      = AF_INET;
        server.sin_addr.s_addr = INADDR_ANY;
        server.sin_port        = htons(32158);
        bind(s, (struct sockaddr*) &server, sizeof(server));
        listen(s, 3);
    }

    // Inherited via connector
    virtual std::shared_ptr<fast_cgi::connection> accept() override
    {
        int c = sizeof(struct sockaddr_in);
        struct sockaddr_in client;

        return std::shared_ptr<fast_cgi::connection>(new conn(::accept(s, (struct sockaddr*) &client, (socklen_t*) &c)));
    }
};

class all : public fast_cgi::allocator
{
    // Inherited via allocator
    virtual void* allocate(std::size_t size, std::size_t align) override
    {
        assert(align == 1);

        return std::malloc(size);
    }
    virtual void deallocate(void* ptr, std::size_t size) override
    {
        std::free(ptr);
    }
};

int main()
{
    LOG(set_level(spdlog::level::trace));

    // create server
    fast_cgi::protocol protocol(std::make_shared<con>(), std::make_shared<all>());

    protocol.set_role<responder>();

    protocol.run();
    protocol.join();
}
